// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: menu.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	zero "gopkg.in/guregu/null.v4/zero"
)

const countMenuItems = `-- name: CountMenuItems :one
SELECT COUNT(*) FROM menu_items
WHERE venue_id = $1
`

func (q *Queries) CountMenuItems(ctx context.Context, venueID string) (int64, error) {
	row := q.db.QueryRow(ctx, countMenuItems, venueID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMenuItem = `-- name: CreateMenuItem :exec
INSERT INTO menu_items (
    title,
    category_id,
    venue_id,
    price,
    image_url,
    is_available,
    description
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)
`

type CreateMenuItemParams struct {
	Title       string         `json:"title"`
	CategoryID  string         `json:"category_id"`
	VenueID     string         `json:"venue_id"`
	Price       pgtype.Numeric `json:"price"`
	ImageUrl    string         `json:"image_url"`
	IsAvailable bool           `json:"is_available"`
	Description zero.String    `json:"description"`
}

func (q *Queries) CreateMenuItem(ctx context.Context, arg CreateMenuItemParams) error {
	_, err := q.db.Exec(ctx, createMenuItem,
		arg.Title,
		arg.CategoryID,
		arg.VenueID,
		arg.Price,
		arg.ImageUrl,
		arg.IsAvailable,
		arg.Description,
	)
	return err
}

const createQrLink = `-- name: CreateQrLink :one
INSERT INTO qr_links (
    venue_id,
    table_number,
    expires_at
) VALUES (
    $1,
    $2,
    $3
) RETURNING id
`

type CreateQrLinkParams struct {
	VenueID     string             `json:"venue_id"`
	TableNumber int32              `json:"table_number"`
	ExpiresAt   pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateQrLink(ctx context.Context, arg CreateQrLinkParams) (string, error) {
	row := q.db.QueryRow(ctx, createQrLink, arg.VenueID, arg.TableNumber, arg.ExpiresAt)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteMenuItem = `-- name: DeleteMenuItem :exec
DELETE FROM menu_items WHERE id = $1
`

func (q *Queries) DeleteMenuItem(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteMenuItem, id)
	return err
}

const getMenuItem = `-- name: GetMenuItem :one
SELECT id, title, category_id, venue_id, price, image_url, is_available, description, created_at, deleted_at FROM menu_items
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMenuItem(ctx context.Context, id string) (MenuItem, error) {
	row := q.db.QueryRow(ctx, getMenuItem, id)
	var i MenuItem
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CategoryID,
		&i.VenueID,
		&i.Price,
		&i.ImageUrl,
		&i.IsAvailable,
		&i.Description,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listMenuItems = `-- name: ListMenuItems :many
SELECT id, title, category_id, venue_id, price, image_url, is_available, description, created_at, deleted_at FROM menu_items
WHERE venue_id = $1
AND category_id = $2
ORDER BY created_at DESC
LIMIT $4 OFFSET $3
`

type ListMenuItemsParams struct {
	VenueID    string `json:"venue_id"`
	CategoryID string `json:"category_id"`
	Offset     int32  `json:"offset"`
	Limit      int32  `json:"limit"`
}

func (q *Queries) ListMenuItems(ctx context.Context, arg ListMenuItemsParams) ([]MenuItem, error) {
	rows, err := q.db.Query(ctx, listMenuItems,
		arg.VenueID,
		arg.CategoryID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MenuItem
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CategoryID,
			&i.VenueID,
			&i.Price,
			&i.ImageUrl,
			&i.IsAvailable,
			&i.Description,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMenuItem = `-- name: UpdateMenuItem :exec
UPDATE menu_items SET 
    title = COALESCE($1, title),
    category_id = COALESCE($2, category_id),
    venue_id = COALESCE($3, venue_id),
    price = COALESCE($4, price),
    image_url = COALESCE($5, image_url),
    is_available = COALESCE($6, is_available),
    description = COALESCE($7, description)
WHERE id = $8
`

type UpdateMenuItemParams struct {
	Title       zero.String `json:"title"`
	CategoryID  zero.String `json:"category_id"`
	VenueID     zero.String `json:"venue_id"`
	Price       zero.Float  `json:"price"`
	ImageUrl    zero.String `json:"image_url"`
	IsAvailable zero.Bool   `json:"is_available"`
	Description zero.String `json:"description"`
	ID          string      `json:"id"`
}

func (q *Queries) UpdateMenuItem(ctx context.Context, arg UpdateMenuItemParams) error {
	_, err := q.db.Exec(ctx, updateMenuItem,
		arg.Title,
		arg.CategoryID,
		arg.VenueID,
		arg.Price,
		arg.ImageUrl,
		arg.IsAvailable,
		arg.Description,
		arg.ID,
	)
	return err
}
