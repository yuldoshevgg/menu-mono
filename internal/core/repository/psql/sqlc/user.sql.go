// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: user.sql

package sqlc

import (
	"context"

	zero "gopkg.in/guregu/null.v4/zero"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users WHERE deleted_at IS NULL
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    username,
    password,
    role_id,
    venue_id,
    first_name,
    last_name,
    phone_number,
    middle_name
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
`

type CreateUserParams struct {
	Username    string      `json:"username"`
	Password    string      `json:"password"`
	RoleID      string      `json:"role_id"`
	VenueID     string      `json:"venue_id"`
	FirstName   string      `json:"first_name"`
	LastName    string      `json:"last_name"`
	PhoneNumber string      `json:"phone_number"`
	MiddleName  zero.String `json:"middle_name"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.RoleID,
		arg.VenueID,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.MiddleName,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, role_id, venue_id, first_name, last_name, phone_number, middle_name, created_at, deleted_at FROM users WHERE id = $1 LIMIT 1 AND deleted_at IS NULL
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.RoleID,
		&i.VenueID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.MiddleName,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, role_id, venue_id, first_name, last_name, phone_number, middle_name, created_at, deleted_at FROM users WHERE deleted_at IS NULL ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.RoleID,
			&i.VenueID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.MiddleName,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET 
    username = COALESCE($1, username),
    password = COALESCE($2, password),
    role_id = COALESCE($3, role_id),
    venue_id = COALESCE($4, venue_id),
    first_name = COALESCE($5, first_name),
    last_name = COALESCE($6, last_name),
    phone_number = COALESCE($7, phone_number),
    middle_name = COALESCE($8, middle_name) 
WHERE id = $9 AND deleted_at IS NULL
`

type UpdateUserParams struct {
	Username    zero.String `json:"username"`
	Password    zero.String `json:"password"`
	RoleID      zero.String `json:"role_id"`
	VenueID     zero.String `json:"venue_id"`
	FirstName   zero.String `json:"first_name"`
	LastName    zero.String `json:"last_name"`
	PhoneNumber zero.String `json:"phone_number"`
	MiddleName  zero.String `json:"middle_name"`
	ID          string      `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Username,
		arg.Password,
		arg.RoleID,
		arg.VenueID,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.MiddleName,
		arg.ID,
	)
	return err
}
