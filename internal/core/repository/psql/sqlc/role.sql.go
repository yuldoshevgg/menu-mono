// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: role.sql

package sqlc

import (
	"context"

	zero "gopkg.in/guregu/null.v4/zero"
)

const countRoles = `-- name: CountRoles :one
SELECT COUNT(*) FROM roles WHERE deleted_at IS NULL
`

func (q *Queries) CountRoles(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countRoles)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRole = `-- name: CreateRole :exec
INSERT INTO roles 
    (title, description) 
VALUES 
    (
        $1,
        $2
    )
ON CONFLICT (title) DO UPDATE SET 
    description = $2
`

type CreateRoleParams struct {
	Title       string      `json:"title"`
	Description zero.String `json:"description"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.Exec(ctx, createRole, arg.Title, arg.Description)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteRole(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, title, description, created_at, deleted_at FROM roles WHERE id = $1 LIMIT 1 AND deleted_at IS NULL
`

func (q *Queries) GetRole(ctx context.Context, id string) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, title, description, created_at, deleted_at FROM roles WHERE deleted_at IS NULL ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type ListRolesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRoles(ctx context.Context, arg ListRolesParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :exec
UPDATE roles SET 
    title = COALESCE($1, title),
    description = COALESCE($2, description)
WHERE id = $3 AND deleted_at IS NULL
`

type UpdateRoleParams struct {
	Title       zero.String `json:"title"`
	Description zero.String `json:"description"`
	ID          string      `json:"id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) error {
	_, err := q.db.Exec(ctx, updateRole, arg.Title, arg.Description, arg.ID)
	return err
}
