// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: category.sql

package sqlc

import (
	"context"

	zero "gopkg.in/guregu/null.v4/zero"
)

const countCategories = `-- name: CountCategories :one
SELECT COUNT(*) FROM categories
WHERE venue_id = $1
`

func (q *Queries) CountCategories(ctx context.Context, venueID string) (int64, error) {
	row := q.db.QueryRow(ctx, countCategories, venueID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :exec
INSERT INTO categories (
    name,
    venue_id
) VALUES (
    $1,
    $2
)
`

type CreateCategoryParams struct {
	Name    string `json:"name"`
	VenueID string `json:"venue_id"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.Exec(ctx, createCategory, arg.Name, arg.VenueID)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, venue_id, created_at, deleted_at FROM categories
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.VenueID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, venue_id, created_at, deleted_at FROM categories
WHERE venue_id = $1
ORDER BY created_at DESC
LIMIT $3 OFFSET $2
`

type ListCategoriesParams struct {
	VenueID string `json:"venue_id"`
	Offset  int32  `json:"offset"`
	Limit   int32  `json:"limit"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, listCategories, arg.VenueID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.VenueID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE categories SET 
    name = COALESCE($1, name),
    venue_id = COALESCE($2, venue_id)
WHERE id = $3
`

type UpdateCategoryParams struct {
	Name    zero.String `json:"name"`
	VenueID zero.String `json:"venue_id"`
	ID      string      `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory, arg.Name, arg.VenueID, arg.ID)
	return err
}
