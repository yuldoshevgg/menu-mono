// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: general_service/venue_service.proto

package general_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VenueService_CreateVenue_FullMethodName = "/general_service.VenueService/CreateVenue"
	VenueService_GetVenue_FullMethodName    = "/general_service.VenueService/GetVenue"
	VenueService_UpdateVenue_FullMethodName = "/general_service.VenueService/UpdateVenue"
	VenueService_DeleteVenue_FullMethodName = "/general_service.VenueService/DeleteVenue"
	VenueService_ListVenues_FullMethodName  = "/general_service.VenueService/ListVenues"
)

// VenueServiceClient is the client API for VenueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VenueServiceClient interface {
	CreateVenue(ctx context.Context, in *CreateVenueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetVenue(ctx context.Context, in *GetVenueRequest, opts ...grpc.CallOption) (*GetVenueResponse, error)
	UpdateVenue(ctx context.Context, in *UpdateVenueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteVenue(ctx context.Context, in *DeleteVenueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListVenues(ctx context.Context, in *ListVenuesRequest, opts ...grpc.CallOption) (*ListVenuesResponse, error)
}

type venueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVenueServiceClient(cc grpc.ClientConnInterface) VenueServiceClient {
	return &venueServiceClient{cc}
}

func (c *venueServiceClient) CreateVenue(ctx context.Context, in *CreateVenueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VenueService_CreateVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueServiceClient) GetVenue(ctx context.Context, in *GetVenueRequest, opts ...grpc.CallOption) (*GetVenueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVenueResponse)
	err := c.cc.Invoke(ctx, VenueService_GetVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueServiceClient) UpdateVenue(ctx context.Context, in *UpdateVenueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VenueService_UpdateVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueServiceClient) DeleteVenue(ctx context.Context, in *DeleteVenueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VenueService_DeleteVenue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *venueServiceClient) ListVenues(ctx context.Context, in *ListVenuesRequest, opts ...grpc.CallOption) (*ListVenuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVenuesResponse)
	err := c.cc.Invoke(ctx, VenueService_ListVenues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VenueServiceServer is the server API for VenueService service.
// All implementations must embed UnimplementedVenueServiceServer
// for forward compatibility.
type VenueServiceServer interface {
	CreateVenue(context.Context, *CreateVenueRequest) (*emptypb.Empty, error)
	GetVenue(context.Context, *GetVenueRequest) (*GetVenueResponse, error)
	UpdateVenue(context.Context, *UpdateVenueRequest) (*emptypb.Empty, error)
	DeleteVenue(context.Context, *DeleteVenueRequest) (*emptypb.Empty, error)
	ListVenues(context.Context, *ListVenuesRequest) (*ListVenuesResponse, error)
	mustEmbedUnimplementedVenueServiceServer()
}

// UnimplementedVenueServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVenueServiceServer struct{}

func (UnimplementedVenueServiceServer) CreateVenue(context.Context, *CreateVenueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVenue not implemented")
}
func (UnimplementedVenueServiceServer) GetVenue(context.Context, *GetVenueRequest) (*GetVenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVenue not implemented")
}
func (UnimplementedVenueServiceServer) UpdateVenue(context.Context, *UpdateVenueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVenue not implemented")
}
func (UnimplementedVenueServiceServer) DeleteVenue(context.Context, *DeleteVenueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVenue not implemented")
}
func (UnimplementedVenueServiceServer) ListVenues(context.Context, *ListVenuesRequest) (*ListVenuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVenues not implemented")
}
func (UnimplementedVenueServiceServer) mustEmbedUnimplementedVenueServiceServer() {}
func (UnimplementedVenueServiceServer) testEmbeddedByValue()                      {}

// UnsafeVenueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VenueServiceServer will
// result in compilation errors.
type UnsafeVenueServiceServer interface {
	mustEmbedUnimplementedVenueServiceServer()
}

func RegisterVenueServiceServer(s grpc.ServiceRegistrar, srv VenueServiceServer) {
	// If the following call pancis, it indicates UnimplementedVenueServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VenueService_ServiceDesc, srv)
}

func _VenueService_CreateVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueServiceServer).CreateVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueService_CreateVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueServiceServer).CreateVenue(ctx, req.(*CreateVenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueService_GetVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueServiceServer).GetVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueService_GetVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueServiceServer).GetVenue(ctx, req.(*GetVenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueService_UpdateVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueServiceServer).UpdateVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueService_UpdateVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueServiceServer).UpdateVenue(ctx, req.(*UpdateVenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueService_DeleteVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueServiceServer).DeleteVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueService_DeleteVenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueServiceServer).DeleteVenue(ctx, req.(*DeleteVenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VenueService_ListVenues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVenuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueServiceServer).ListVenues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VenueService_ListVenues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueServiceServer).ListVenues(ctx, req.(*ListVenuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VenueService_ServiceDesc is the grpc.ServiceDesc for VenueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VenueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "general_service.VenueService",
	HandlerType: (*VenueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVenue",
			Handler:    _VenueService_CreateVenue_Handler,
		},
		{
			MethodName: "GetVenue",
			Handler:    _VenueService_GetVenue_Handler,
		},
		{
			MethodName: "UpdateVenue",
			Handler:    _VenueService_UpdateVenue_Handler,
		},
		{
			MethodName: "DeleteVenue",
			Handler:    _VenueService_DeleteVenue_Handler,
		},
		{
			MethodName: "ListVenues",
			Handler:    _VenueService_ListVenues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general_service/venue_service.proto",
}
