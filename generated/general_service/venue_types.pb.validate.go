// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: general_service/venue_types.proto

package general_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateVenueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateVenueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateVenueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateVenueRequestMultiError, or nil if none found.
func (m *CreateVenueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateVenueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 100 {
		err := CreateVenueRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		err := CreateVenueRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSlug()); l < 1 || l > 100 {
		err := CreateVenueRequestValidationError{
			field:  "Slug",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVenueId()); l < 1 || l > 100 {
		err := CreateVenueRequestValidationError{
			field:  "VenueId",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLogoUrl()); l < 1 || l > 100 {
		err := CreateVenueRequestValidationError{
			field:  "LogoUrl",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateVenueRequestMultiError(errors)
	}

	return nil
}

// CreateVenueRequestMultiError is an error wrapping multiple validation errors
// returned by CreateVenueRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateVenueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateVenueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateVenueRequestMultiError) AllErrors() []error { return m }

// CreateVenueRequestValidationError is the validation error returned by
// CreateVenueRequest.Validate if the designated constraints aren't met.
type CreateVenueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVenueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVenueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVenueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVenueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVenueRequestValidationError) ErrorName() string {
	return "CreateVenueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVenueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVenueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVenueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVenueRequestValidationError{}

// Validate checks the field values on GetVenueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVenueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVenueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVenueRequestMultiError, or nil if none found.
func (m *GetVenueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVenueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 36 {
		err := GetVenueRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetVenueRequestMultiError(errors)
	}

	return nil
}

// GetVenueRequestMultiError is an error wrapping multiple validation errors
// returned by GetVenueRequest.ValidateAll() if the designated constraints
// aren't met.
type GetVenueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVenueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVenueRequestMultiError) AllErrors() []error { return m }

// GetVenueRequestValidationError is the validation error returned by
// GetVenueRequest.Validate if the designated constraints aren't met.
type GetVenueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVenueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVenueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVenueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVenueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVenueRequestValidationError) ErrorName() string { return "GetVenueRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetVenueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVenueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVenueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVenueRequestValidationError{}

// Validate checks the field values on GetVenueResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetVenueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVenueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVenueResponseMultiError, or nil if none found.
func (m *GetVenueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVenueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Slug

	// no validation rules for VenueId

	// no validation rules for LogoUrl

	// no validation rules for Status

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return GetVenueResponseMultiError(errors)
	}

	return nil
}

// GetVenueResponseMultiError is an error wrapping multiple validation errors
// returned by GetVenueResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVenueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVenueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVenueResponseMultiError) AllErrors() []error { return m }

// GetVenueResponseValidationError is the validation error returned by
// GetVenueResponse.Validate if the designated constraints aren't met.
type GetVenueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVenueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVenueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVenueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVenueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVenueResponseValidationError) ErrorName() string { return "GetVenueResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetVenueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVenueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVenueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVenueResponseValidationError{}

// Validate checks the field values on UpdateVenueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateVenueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateVenueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateVenueRequestMultiError, or nil if none found.
func (m *UpdateVenueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateVenueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 36 {
		err := UpdateVenueRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 100 {
		err := UpdateVenueRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		err := UpdateVenueRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetSlug()); l < 1 || l > 100 {
		err := UpdateVenueRequestValidationError{
			field:  "Slug",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetVenueId()); l < 1 || l > 100 {
		err := UpdateVenueRequestValidationError{
			field:  "VenueId",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetLogoUrl()); l < 1 || l > 100 {
		err := UpdateVenueRequestValidationError{
			field:  "LogoUrl",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return UpdateVenueRequestMultiError(errors)
	}

	return nil
}

// UpdateVenueRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateVenueRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateVenueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateVenueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateVenueRequestMultiError) AllErrors() []error { return m }

// UpdateVenueRequestValidationError is the validation error returned by
// UpdateVenueRequest.Validate if the designated constraints aren't met.
type UpdateVenueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVenueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVenueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVenueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVenueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVenueRequestValidationError) ErrorName() string {
	return "UpdateVenueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVenueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVenueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVenueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVenueRequestValidationError{}

// Validate checks the field values on DeleteVenueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteVenueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteVenueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteVenueRequestMultiError, or nil if none found.
func (m *DeleteVenueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteVenueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 36 {
		err := DeleteVenueRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteVenueRequestMultiError(errors)
	}

	return nil
}

// DeleteVenueRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteVenueRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteVenueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteVenueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteVenueRequestMultiError) AllErrors() []error { return m }

// DeleteVenueRequestValidationError is the validation error returned by
// DeleteVenueRequest.Validate if the designated constraints aren't met.
type DeleteVenueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVenueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVenueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVenueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVenueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVenueRequestValidationError) ErrorName() string {
	return "DeleteVenueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVenueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVenueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVenueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVenueRequestValidationError{}

// Validate checks the field values on ListVenuesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListVenuesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVenuesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVenuesRequestMultiError, or nil if none found.
func (m *ListVenuesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVenuesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListVenuesRequestMultiError(errors)
	}

	return nil
}

// ListVenuesRequestMultiError is an error wrapping multiple validation errors
// returned by ListVenuesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListVenuesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVenuesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVenuesRequestMultiError) AllErrors() []error { return m }

// ListVenuesRequestValidationError is the validation error returned by
// ListVenuesRequest.Validate if the designated constraints aren't met.
type ListVenuesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVenuesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVenuesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVenuesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVenuesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVenuesRequestValidationError) ErrorName() string {
	return "ListVenuesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVenuesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVenuesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVenuesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVenuesRequestValidationError{}

// Validate checks the field values on ListVenuesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListVenuesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListVenuesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListVenuesResponseMultiError, or nil if none found.
func (m *ListVenuesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListVenuesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetVenues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListVenuesResponseValidationError{
						field:  fmt.Sprintf("Venues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListVenuesResponseValidationError{
						field:  fmt.Sprintf("Venues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListVenuesResponseValidationError{
					field:  fmt.Sprintf("Venues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListVenuesResponseMultiError(errors)
	}

	return nil
}

// ListVenuesResponseMultiError is an error wrapping multiple validation errors
// returned by ListVenuesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListVenuesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListVenuesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListVenuesResponseMultiError) AllErrors() []error { return m }

// ListVenuesResponseValidationError is the validation error returned by
// ListVenuesResponse.Validate if the designated constraints aren't met.
type ListVenuesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVenuesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVenuesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVenuesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVenuesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVenuesResponseValidationError) ErrorName() string {
	return "ListVenuesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVenuesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVenuesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVenuesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVenuesResponseValidationError{}
