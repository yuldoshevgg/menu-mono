// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: general/event_response.proto

package general

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ErrorInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorInfoMultiError, or nil
// if none found.
func (m *ErrorInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for ReportId

	// no validation rules for BnplCode

	if all {
		switch v := interface{}(m.GetLabel()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorInfoValidationError{
					field:  "Label",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorInfoValidationError{
					field:  "Label",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLabel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorInfoValidationError{
				field:  "Label",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorInfoValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorInfoValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorInfoValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorInfoMultiError(errors)
	}

	return nil
}

// ErrorInfoMultiError is an error wrapping multiple validation errors returned
// by ErrorInfo.ValidateAll() if the designated constraints aren't met.
type ErrorInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorInfoMultiError) AllErrors() []error { return m }

// ErrorInfoValidationError is the validation error returned by
// ErrorInfo.Validate if the designated constraints aren't met.
type ErrorInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorInfoValidationError) ErrorName() string { return "ErrorInfoValidationError" }

// Error satisfies the builtin error interface
func (e ErrorInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorInfoValidationError{}

// Validate checks the field values on Id with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Id) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Id with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IdMultiError, or nil if none found.
func (m *Id) ValidateAll() error {
	return m.validate(true)
}

func (m *Id) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return IdMultiError(errors)
	}

	return nil
}

// IdMultiError is an error wrapping multiple validation errors returned by
// Id.ValidateAll() if the designated constraints aren't met.
type IdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IdMultiError) AllErrors() []error { return m }

// IdValidationError is the validation error returned by Id.Validate if the
// designated constraints aren't met.
type IdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IdValidationError) ErrorName() string { return "IdValidationError" }

// Error satisfies the builtin error interface
func (e IdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IdValidationError{}

// Validate checks the field values on AlifEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlifEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlifEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlifEventResponseMultiError, or nil if none found.
func (m *AlifEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AlifEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WsPath

	// no validation rules for Message

	// no validation rules for ClientStatus

	// no validation rules for CustomerId

	if len(errors) > 0 {
		return AlifEventResponseMultiError(errors)
	}

	return nil
}

// AlifEventResponseMultiError is an error wrapping multiple validation errors
// returned by AlifEventResponse.ValidateAll() if the designated constraints
// aren't met.
type AlifEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlifEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlifEventResponseMultiError) AllErrors() []error { return m }

// AlifEventResponseValidationError is the validation error returned by
// AlifEventResponse.Validate if the designated constraints aren't met.
type AlifEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlifEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlifEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlifEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlifEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlifEventResponseValidationError) ErrorName() string {
	return "AlifEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AlifEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlifEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlifEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlifEventResponseValidationError{}

// Validate checks the field values on ImanEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ImanEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImanEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImanEventResponseMultiError, or nil if none found.
func (m *ImanEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImanEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WsPath

	if len(errors) > 0 {
		return ImanEventResponseMultiError(errors)
	}

	return nil
}

// ImanEventResponseMultiError is an error wrapping multiple validation errors
// returned by ImanEventResponse.ValidateAll() if the designated constraints
// aren't met.
type ImanEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImanEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImanEventResponseMultiError) AllErrors() []error { return m }

// ImanEventResponseValidationError is the validation error returned by
// ImanEventResponse.Validate if the designated constraints aren't met.
type ImanEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImanEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImanEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImanEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImanEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImanEventResponseValidationError) ErrorName() string {
	return "ImanEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImanEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImanEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImanEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImanEventResponseValidationError{}

// Validate checks the field values on BrokerEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BrokerEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BrokerEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BrokerEventResponseMultiError, or nil if none found.
func (m *BrokerEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BrokerEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAlif()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrokerEventResponseValidationError{
					field:  "Alif",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrokerEventResponseValidationError{
					field:  "Alif",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlif()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrokerEventResponseValidationError{
				field:  "Alif",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetIman()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrokerEventResponseValidationError{
					field:  "Iman",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrokerEventResponseValidationError{
					field:  "Iman",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIman()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrokerEventResponseValidationError{
				field:  "Iman",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BrokerEventResponseMultiError(errors)
	}

	return nil
}

// BrokerEventResponseMultiError is an error wrapping multiple validation
// errors returned by BrokerEventResponse.ValidateAll() if the designated
// constraints aren't met.
type BrokerEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrokerEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrokerEventResponseMultiError) AllErrors() []error { return m }

// BrokerEventResponseValidationError is the validation error returned by
// BrokerEventResponse.Validate if the designated constraints aren't met.
type BrokerEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrokerEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrokerEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrokerEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrokerEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrokerEventResponseValidationError) ErrorName() string {
	return "BrokerEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BrokerEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrokerEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrokerEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrokerEventResponseValidationError{}

// Validate checks the field values on CreatedEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatedEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatedEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatedEventResponseMultiError, or nil if none found.
func (m *CreatedEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatedEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WsPath

	// no validation rules for TaskId

	// no validation rules for IsCardConfirmed

	if len(errors) > 0 {
		return CreatedEventResponseMultiError(errors)
	}

	return nil
}

// CreatedEventResponseMultiError is an error wrapping multiple validation
// errors returned by CreatedEventResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatedEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatedEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatedEventResponseMultiError) AllErrors() []error { return m }

// CreatedEventResponseValidationError is the validation error returned by
// CreatedEventResponse.Validate if the designated constraints aren't met.
type CreatedEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatedEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatedEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatedEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatedEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatedEventResponseValidationError) ErrorName() string {
	return "CreatedEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatedEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatedEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatedEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatedEventResponseValidationError{}

// Validate checks the field values on ErrorInfo_Label with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ErrorInfo_Label) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorInfo_Label with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ErrorInfo_LabelMultiError, or nil if none found.
func (m *ErrorInfo_Label) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorInfo_Label) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uz

	// no validation rules for Ru

	// no validation rules for En

	if len(errors) > 0 {
		return ErrorInfo_LabelMultiError(errors)
	}

	return nil
}

// ErrorInfo_LabelMultiError is an error wrapping multiple validation errors
// returned by ErrorInfo_Label.ValidateAll() if the designated constraints
// aren't met.
type ErrorInfo_LabelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorInfo_LabelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorInfo_LabelMultiError) AllErrors() []error { return m }

// ErrorInfo_LabelValidationError is the validation error returned by
// ErrorInfo_Label.Validate if the designated constraints aren't met.
type ErrorInfo_LabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorInfo_LabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorInfo_LabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorInfo_LabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorInfo_LabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorInfo_LabelValidationError) ErrorName() string { return "ErrorInfo_LabelValidationError" }

// Error satisfies the builtin error interface
func (e ErrorInfo_LabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorInfo_Label.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorInfo_LabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorInfo_LabelValidationError{}
