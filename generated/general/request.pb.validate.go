// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: general/request.proto

package general

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetAllRequestMultiError, or
// nil if none found.
func (m *GetAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	// no validation rules for VendorId

	// no validation rules for SearchField

	// no validation rules for Limit

	// no validation rules for Offset

	// no validation rules for Status

	// no validation rules for CustomerId

	if len(errors) > 0 {
		return GetAllRequestMultiError(errors)
	}

	return nil
}

// GetAllRequestMultiError is an error wrapping multiple validation errors
// returned by GetAllRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRequestMultiError) AllErrors() []error { return m }

// GetAllRequestValidationError is the validation error returned by
// GetAllRequest.Validate if the designated constraints aren't met.
type GetAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRequestValidationError) ErrorName() string { return "GetAllRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRequestValidationError{}

// Validate checks the field values on GetByID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GetByIDMultiError, or nil if none found.
func (m *GetByID) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetByIDMultiError(errors)
	}

	return nil
}

// GetByIDMultiError is an error wrapping multiple validation errors returned
// by GetByID.ValidateAll() if the designated constraints aren't met.
type GetByIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByIDMultiError) AllErrors() []error { return m }

// GetByIDValidationError is the validation error returned by GetByID.Validate
// if the designated constraints aren't met.
type GetByIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByIDValidationError) ErrorName() string { return "GetByIDValidationError" }

// Error satisfies the builtin error interface
func (e GetByIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByIDValidationError{}

// Validate checks the field values on GetByUserID with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetByUserID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByUserID with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetByUserIDMultiError, or
// nil if none found.
func (m *GetByUserID) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByUserID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetByUserIDMultiError(errors)
	}

	return nil
}

// GetByUserIDMultiError is an error wrapping multiple validation errors
// returned by GetByUserID.ValidateAll() if the designated constraints aren't met.
type GetByUserIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByUserIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByUserIDMultiError) AllErrors() []error { return m }

// GetByUserIDValidationError is the validation error returned by
// GetByUserID.Validate if the designated constraints aren't met.
type GetByUserIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByUserIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByUserIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByUserIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByUserIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByUserIDValidationError) ErrorName() string { return "GetByUserIDValidationError" }

// Error satisfies the builtin error interface
func (e GetByUserIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByUserID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByUserIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByUserIDValidationError{}

// Validate checks the field values on TaskID with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskID) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskID with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TaskIDMultiError, or nil if none found.
func (m *TaskID) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskID) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	if len(errors) > 0 {
		return TaskIDMultiError(errors)
	}

	return nil
}

// TaskIDMultiError is an error wrapping multiple validation errors returned by
// TaskID.ValidateAll() if the designated constraints aren't met.
type TaskIDMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskIDMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskIDMultiError) AllErrors() []error { return m }

// TaskIDValidationError is the validation error returned by TaskID.Validate if
// the designated constraints aren't met.
type TaskIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskIDValidationError) ErrorName() string { return "TaskIDValidationError" }

// Error satisfies the builtin error interface
func (e TaskIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskIDValidationError{}

// Validate checks the field values on WsPath with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WsPath) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WsPath with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WsPathMultiError, or nil if none found.
func (m *WsPath) ValidateAll() error {
	return m.validate(true)
}

func (m *WsPath) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WsPath

	// no validation rules for TaskId

	if len(errors) > 0 {
		return WsPathMultiError(errors)
	}

	return nil
}

// WsPathMultiError is an error wrapping multiple validation errors returned by
// WsPath.ValidateAll() if the designated constraints aren't met.
type WsPathMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WsPathMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WsPathMultiError) AllErrors() []error { return m }

// WsPathValidationError is the validation error returned by WsPath.Validate if
// the designated constraints aren't met.
type WsPathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WsPathValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WsPathValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WsPathValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WsPathValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WsPathValidationError) ErrorName() string { return "WsPathValidationError" }

// Error satisfies the builtin error interface
func (e WsPathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWsPath.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WsPathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WsPathValidationError{}
