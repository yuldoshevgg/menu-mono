// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: menu_service/menu_types.proto

package menu_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateMenuItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMenuItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMenuItemRequestMultiError, or nil if none found.
func (m *CreateMenuItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for CategoryId

	// no validation rules for VenueId

	// no validation rules for Price

	// no validation rules for ImageUrl

	// no validation rules for IsAvailable

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateMenuItemRequestMultiError(errors)
	}

	return nil
}

// CreateMenuItemRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMenuItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMenuItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuItemRequestMultiError) AllErrors() []error { return m }

// CreateMenuItemRequestValidationError is the validation error returned by
// CreateMenuItemRequest.Validate if the designated constraints aren't met.
type CreateMenuItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuItemRequestValidationError) ErrorName() string {
	return "CreateMenuItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMenuItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuItemRequestValidationError{}

// Validate checks the field values on GetMenuItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMenuItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMenuItemRequestMultiError, or nil if none found.
func (m *GetMenuItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMenuItemRequestMultiError(errors)
	}

	return nil
}

// GetMenuItemRequestMultiError is an error wrapping multiple validation errors
// returned by GetMenuItemRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMenuItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuItemRequestMultiError) AllErrors() []error { return m }

// GetMenuItemRequestValidationError is the validation error returned by
// GetMenuItemRequest.Validate if the designated constraints aren't met.
type GetMenuItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuItemRequestValidationError) ErrorName() string {
	return "GetMenuItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMenuItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuItemRequestValidationError{}

// Validate checks the field values on GetMenuItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMenuItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMenuItemResponseMultiError, or nil if none found.
func (m *GetMenuItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for CategoryId

	// no validation rules for VenueId

	// no validation rules for Price

	// no validation rules for ImageUrl

	// no validation rules for IsAvailable

	// no validation rules for Description

	if len(errors) > 0 {
		return GetMenuItemResponseMultiError(errors)
	}

	return nil
}

// GetMenuItemResponseMultiError is an error wrapping multiple validation
// errors returned by GetMenuItemResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMenuItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuItemResponseMultiError) AllErrors() []error { return m }

// GetMenuItemResponseValidationError is the validation error returned by
// GetMenuItemResponse.Validate if the designated constraints aren't met.
type GetMenuItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuItemResponseValidationError) ErrorName() string {
	return "GetMenuItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMenuItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuItemResponseValidationError{}

// Validate checks the field values on ListMenuItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMenuItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMenuItemsRequestMultiError, or nil if none found.
func (m *ListMenuItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VenueId

	// no validation rules for Limit

	// no validation rules for Page

	// no validation rules for CategoryId

	if len(errors) > 0 {
		return ListMenuItemsRequestMultiError(errors)
	}

	return nil
}

// ListMenuItemsRequestMultiError is an error wrapping multiple validation
// errors returned by ListMenuItemsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMenuItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuItemsRequestMultiError) AllErrors() []error { return m }

// ListMenuItemsRequestValidationError is the validation error returned by
// ListMenuItemsRequest.Validate if the designated constraints aren't met.
type ListMenuItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuItemsRequestValidationError) ErrorName() string {
	return "ListMenuItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMenuItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuItemsRequestValidationError{}

// Validate checks the field values on ListMenuItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMenuItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMenuItemsResponseMultiError, or nil if none found.
func (m *ListMenuItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenuItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMenuItemsResponseValidationError{
						field:  fmt.Sprintf("MenuItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMenuItemsResponseValidationError{
						field:  fmt.Sprintf("MenuItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenuItemsResponseValidationError{
					field:  fmt.Sprintf("MenuItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListMenuItemsResponseMultiError(errors)
	}

	return nil
}

// ListMenuItemsResponseMultiError is an error wrapping multiple validation
// errors returned by ListMenuItemsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMenuItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuItemsResponseMultiError) AllErrors() []error { return m }

// ListMenuItemsResponseValidationError is the validation error returned by
// ListMenuItemsResponse.Validate if the designated constraints aren't met.
type ListMenuItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuItemsResponseValidationError) ErrorName() string {
	return "ListMenuItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMenuItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuItemsResponseValidationError{}

// Validate checks the field values on UpdateMenuItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMenuItemRequestMultiError, or nil if none found.
func (m *UpdateMenuItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for CategoryId

	// no validation rules for VenueId

	// no validation rules for Price

	// no validation rules for ImageUrl

	// no validation rules for IsAvailable

	// no validation rules for Description

	if len(errors) > 0 {
		return UpdateMenuItemRequestMultiError(errors)
	}

	return nil
}

// UpdateMenuItemRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMenuItemRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMenuItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuItemRequestMultiError) AllErrors() []error { return m }

// UpdateMenuItemRequestValidationError is the validation error returned by
// UpdateMenuItemRequest.Validate if the designated constraints aren't met.
type UpdateMenuItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuItemRequestValidationError) ErrorName() string {
	return "UpdateMenuItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMenuItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuItemRequestValidationError{}

// Validate checks the field values on DeleteMenuItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMenuItemRequestMultiError, or nil if none found.
func (m *DeleteMenuItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMenuItemRequestMultiError(errors)
	}

	return nil
}

// DeleteMenuItemRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMenuItemRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMenuItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuItemRequestMultiError) AllErrors() []error { return m }

// DeleteMenuItemRequestValidationError is the validation error returned by
// DeleteMenuItemRequest.Validate if the designated constraints aren't met.
type DeleteMenuItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuItemRequestValidationError) ErrorName() string {
	return "DeleteMenuItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMenuItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuItemRequestValidationError{}

// Validate checks the field values on AccessMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AccessMenuResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessMenuResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessMenuResponseMultiError, or nil if none found.
func (m *AccessMenuResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessMenuResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Link

	if len(errors) > 0 {
		return AccessMenuResponseMultiError(errors)
	}

	return nil
}

// AccessMenuResponseMultiError is an error wrapping multiple validation errors
// returned by AccessMenuResponse.ValidateAll() if the designated constraints
// aren't met.
type AccessMenuResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessMenuResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessMenuResponseMultiError) AllErrors() []error { return m }

// AccessMenuResponseValidationError is the validation error returned by
// AccessMenuResponse.Validate if the designated constraints aren't met.
type AccessMenuResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessMenuResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessMenuResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessMenuResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessMenuResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessMenuResponseValidationError) ErrorName() string {
	return "AccessMenuResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AccessMenuResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessMenuResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessMenuResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessMenuResponseValidationError{}
