syntax = "proto3";

package general_service;
option go_package = "gitlab.com/media_park/bnpl-mono-repo/generated/general_service";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "general_service/venue_types.proto";
import "google/protobuf/empty.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: { title: "API" version: "1.0.0" }
    security_definitions: {
        security: {
            key: "bearer"
            value: { type: TYPE_API_KEY in: IN_HEADER name: "Authorization" description: "Authentication token, prefixed by Bearer: Bearer <token>" }
        }
    }
    security: { security_requirement: { key: "bearer" } }
};

service VenueService {
    rpc CreateVenue(CreateVenueRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/venues"
            body: "*"
        };
    }
    rpc GetVenue(GetVenueRequest) returns (GetVenueResponse) {
        option (google.api.http) = {
            get: "/v1/venues/{id}"
        };
    }
    rpc UpdateVenue(UpdateVenueRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/venues/{id}"
            body: "*"
        };
    }
    rpc DeleteVenue(DeleteVenueRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/venues/{id}",
        };
    }
    rpc ListVenues(ListVenuesRequest) returns (ListVenuesResponse) {
        option (google.api.http) = {
            get: "/v1/venues"
        };
    }
}